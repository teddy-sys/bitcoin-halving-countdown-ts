{"ast":null,"code":"var _jsxFileName = \"/home/teddy/Projects/bitcoin-halving-countdown/src/Countdown.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport moment from 'moment';\nimport { getBlockCount } from './bitcoinService';\nimport { getLastHalvingBlock, calculateNextHalvingDate } from './halvingCounter';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Countdown = () => {\n  _s();\n  const [timeLeft, setTimeLeft] = useState({\n    years: 0,\n    days: 0,\n    hours: 0,\n    minutes: 0,\n    seconds: 0\n  });\n  const [currentBlock, setCurrentBlock] = useState(0);\n  useEffect(() => {\n    const fetchBlockData = async () => {\n      try {\n        const blockCount = await getBlockCount();\n        setCurrentBlock(blockCount);\n      } catch (error) {\n        console.error('Error fetching block data:', error);\n      }\n    };\n    fetchBlockData();\n    const intervalId = setInterval(fetchBlockData, 60000); // Update every minute\n\n    return () => clearInterval(intervalId);\n  }, []);\n  useEffect(() => {\n    const lastHalvingBlock = getLastHalvingBlock(currentBlock);\n    const fetchBlockTime = async () => {\n      try {\n        const halvingDate = calculateNextHalvingDate(currentBlock, lastHalvingBlock);\n        const targetDate = moment(halvingDate.toDateString());\n        const updateCountdown = () => {\n          const now = moment();\n          const duration = moment.duration(targetDate.diff(now));\n          setTimeLeft({\n            years: duration.years(),\n            days: duration.days(),\n            hours: duration.hours(),\n            minutes: duration.minutes(),\n            seconds: duration.seconds()\n          });\n        };\n        updateCountdown();\n        const countdownIntervalId = setInterval(updateCountdown, 1000);\n        return () => clearInterval(countdownIntervalId);\n      } catch (error) {\n        console.error('Error fetching block time:', error);\n      }\n    };\n    fetchBlockTime();\n  }, [currentBlock]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"countdown\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Bitcoin Halving Countdown\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Estimate Time\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"time\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: [timeLeft.years, \" Years\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [timeLeft.days, \" Days\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [timeLeft.hours, \" Hours\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [timeLeft.minutes, \" Minutes\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [timeLeft.seconds, \" Seconds\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_s(Countdown, \"g3dAtpLeQn+me7pIMEJ298csETk=\");\n_c = Countdown;\nexport default Countdown;\nvar _c;\n$RefreshReg$(_c, \"Countdown\");","map":{"version":3,"names":["React","useState","useEffect","moment","getBlockCount","getLastHalvingBlock","calculateNextHalvingDate","jsxDEV","_jsxDEV","Countdown","_s","timeLeft","setTimeLeft","years","days","hours","minutes","seconds","currentBlock","setCurrentBlock","fetchBlockData","blockCount","error","console","intervalId","setInterval","clearInterval","lastHalvingBlock","fetchBlockTime","halvingDate","targetDate","toDateString","updateCountdown","now","duration","diff","countdownIntervalId","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/teddy/Projects/bitcoin-halving-countdown/src/Countdown.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport moment from 'moment';\nimport { getBlockCount } from './bitcoinService';\nimport { getLastHalvingBlock, calculateNextHalvingDate } from './halvingCounter';\n\ninterface TimeLeft {\n  years: number;\n  days: number;\n  hours: number;\n  minutes: number;\n  seconds: number;\n}\n\nconst Countdown: React.FC = () => {\n  const [timeLeft, setTimeLeft] = useState<TimeLeft>({\n    years: 0,\n    days: 0,\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n  });\n  const [currentBlock, setCurrentBlock] = useState<number>(0);\n\n  useEffect(() => {\n    const fetchBlockData = async () => {\n      try {\n        const blockCount = await getBlockCount();\n        setCurrentBlock(blockCount);\n      } catch (error) {\n        console.error('Error fetching block data:', error);\n      }\n    };\n\n    fetchBlockData();\n\n    const intervalId = setInterval(fetchBlockData, 60000); // Update every minute\n\n    return () => clearInterval(intervalId);\n  }, []);\n\n  useEffect(() => {\n    const lastHalvingBlock = getLastHalvingBlock(currentBlock);\n\n    const fetchBlockTime = async () => {\n      try {\n        const halvingDate = calculateNextHalvingDate(currentBlock, lastHalvingBlock);\n\n        const targetDate = moment(halvingDate.toDateString());\n\n        const updateCountdown = () => {\n          const now = moment();\n          const duration = moment.duration(targetDate.diff(now));\n\n          setTimeLeft({\n            years: duration.years(),\n            days: duration.days(),\n            hours: duration.hours(),\n            minutes: duration.minutes(),\n            seconds: duration.seconds(),\n          });\n        };\n\n        updateCountdown();\n\n        const countdownIntervalId = setInterval(updateCountdown, 1000);\n\n        return () => clearInterval(countdownIntervalId);\n      } catch (error) {\n        console.error('Error fetching block time:', error);\n      }\n    };\n\n    fetchBlockTime();\n  }, [currentBlock]);\n\n  return (\n    <div className=\"countdown\">\n      <h1>Bitcoin Halving Countdown</h1>\n      <h2>Estimate Time</h2>\n      <div className=\"time\">\n        <span>{timeLeft.years} Years</span>\n        <span>{timeLeft.days} Days</span>\n        <span>{timeLeft.hours} Hours</span>\n        <span>{timeLeft.minutes} Minutes</span>\n        <span>{timeLeft.seconds} Seconds</span>\n      </div>\n    </div>\n  );\n};\n\nexport default Countdown;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}